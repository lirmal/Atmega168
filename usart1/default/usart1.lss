
usart1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  00000198  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004b  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000e4  00000000  00000000  00000203  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000a5  00000000  00000000  000002e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000012f  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a0  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000040  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  88:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
		
	}
}

ISR(USART_RX_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
	ReceivedByte = UDR0; // Fetch the recieved byte value into the variable "ByteReceived"
  a0:	e6 ec       	ldi	r30, 0xC6	; 198
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 93 00 01 	sts	0x0100, r24
	UDR0 = ReceivedByte; // Echo back the received byte back to the computer
  aa:	80 91 00 01 	lds	r24, 0x0100
  ae:	80 83       	st	Z, r24
	cli();
  b0:	f8 94       	cli

}
  b2:	ff 91       	pop	r31
  b4:	ef 91       	pop	r30
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <USART_Init>:

void USART_Init(unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  c2:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  c6:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ca:	e1 ec       	ldi	r30, 0xC1	; 193
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	80 83       	st	Z, r24
	/* Set frame format: 8data, 1stop bit, non parity */
	UCSR0C =(3<<UCSZ00);
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	80 93 c2 00 	sts	0x00C2, r24

	UCSR0B |= (1 << RXCIE0);
  d8:	80 81       	ld	r24, Z
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
	sei();
  de:	78 94       	sei
}
  e0:	08 95       	ret

000000e2 <main>:

int main( void )
{

	int check=0x80;
	DDRC |= (1<<PC4)|(1<<PC5);
  e2:	87 b1       	in	r24, 0x07	; 7
  e4:	80 63       	ori	r24, 0x30	; 48
  e6:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<PB2);
  e8:	22 9a       	sbi	0x04, 2	; 4
	USART_Init(MYUBRR);
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 61 00 	call	0xc2	; 0xc2 <USART_Init>
	
	while(1)
	{

		check= ReceivedByte;
  f2:	80 91 00 01 	lds	r24, 0x0100
  f6:	90 e0       	ldi	r25, 0x00	; 0
		if (check==0x36)
  f8:	86 33       	cpi	r24, 0x36	; 54
  fa:	91 05       	cpc	r25, r1
  fc:	11 f4       	brne	.+4      	; 0x102 <main+0x20>
			PORTC|=(1<<PC5);
  fe:	45 9a       	sbi	0x08, 5	; 8
 100:	06 c0       	rjmp	.+12     	; 0x10e <main+0x2c>
		else PORTC&=~(1<<PC5);
 102:	45 98       	cbi	0x08, 5	; 8
		if (check==0x11)
 104:	81 31       	cpi	r24, 0x11	; 17
 106:	91 05       	cpc	r25, r1
 108:	11 f4       	brne	.+4      	; 0x10e <main+0x2c>
		{
			PORTC|=(1<<PC4);
 10a:	44 9a       	sbi	0x08, 4	; 8
 10c:	06 c0       	rjmp	.+12     	; 0x11a <main+0x38>
		}
		else PORTC&=~(1<<PC4);
 10e:	44 98       	cbi	0x08, 4	; 8
		if (check==0x80)
 110:	80 38       	cpi	r24, 0x80	; 128
 112:	91 05       	cpc	r25, r1
 114:	11 f4       	brne	.+4      	; 0x11a <main+0x38>
			PORTB|=(1<<PC2);
 116:	2a 9a       	sbi	0x05, 2	; 5
 118:	01 c0       	rjmp	.+2      	; 0x11c <main+0x3a>
		else PORTB&=~(1<<PC2);
 11a:	2a 98       	cbi	0x05, 2	; 5
		sei();
 11c:	78 94       	sei
 11e:	e9 cf       	rjmp	.-46     	; 0xf2 <main+0x10>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
