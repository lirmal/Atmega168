
motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000184  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  000001f8  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000037  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000da  00000000  00000000  0000024f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000007f  00000000  00000000  00000329  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000015c  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000008d  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

volatile int x,y;
int main (void)
{
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	00 d0       	rcall	.+0      	; 0x96 <main+0x6>
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
   DDRB |= (1 << PB2); // Set LED as output
  9a:	22 9a       	sbi	0x04, 2	; 4

   DDRB |= (1 << PB0);
  9c:	20 9a       	sbi	0x04, 0	; 4
   DDRD |= (1 << PD5)|(1 << PD6)|(1 << PD7);
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	80 6e       	ori	r24, 0xE0	; 224
  a2:	8a b9       	out	0x0a, r24	; 10

   TIMSK1 |= (1 << TOIE1); // Enable overflow interrupt
  a4:	80 91 6f 00 	lds	r24, 0x006F
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	80 93 6f 00 	sts	0x006F, r24
   sei(); // Enable global interrupts
  ae:	78 94       	sei

   TCCR1B |= (1 << CS11)|(1 << CS10); // Start timer at Fcpu/8
  b0:	80 91 81 00 	lds	r24, 0x0081
  b4:	83 60       	ori	r24, 0x03	; 3
  b6:	80 93 81 00 	sts	0x0081, r24

	x=2;
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	90 93 01 01 	sts	0x0101, r25
  c2:	80 93 00 01 	sts	0x0100, r24
	y=1;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	90 93 03 01 	sts	0x0103, r25
  ce:	80 93 02 01 	sts	0x0102, r24

	volatile char D1=0;
  d2:	19 82       	std	Y+1, r1	; 0x01
	volatile char D2=1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	8a 83       	std	Y+2, r24	; 0x02
   for (;;)
   {

	if (x<=0) 
	{
		x=2;
  d8:	22 e0       	ldi	r18, 0x02	; 2
  da:	30 e0       	ldi	r19, 0x00	; 0
		D1^=1;
  dc:	41 e0       	ldi	r20, 0x01	; 1
	volatile char D1=0;
	volatile char D2=1;
   for (;;)
   {

	if (x<=0) 
  de:	80 91 00 01 	lds	r24, 0x0100
  e2:	90 91 01 01 	lds	r25, 0x0101
  e6:	18 16       	cp	r1, r24
  e8:	19 06       	cpc	r1, r25
  ea:	3c f0       	brlt	.+14     	; 0xfa <main+0x6a>
	{
		x=2;
  ec:	30 93 01 01 	sts	0x0101, r19
  f0:	20 93 00 01 	sts	0x0100, r18
		D1^=1;
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	84 27       	eor	r24, r20
  f8:	89 83       	std	Y+1, r24	; 0x01
	}
	if (y<=0) 
  fa:	80 91 02 01 	lds	r24, 0x0102
  fe:	90 91 03 01 	lds	r25, 0x0103
 102:	18 16       	cp	r1, r24
 104:	19 06       	cpc	r1, r25
 106:	3c f0       	brlt	.+14     	; 0x116 <main+0x86>
	{
		y=2;
 108:	30 93 03 01 	sts	0x0103, r19
 10c:	20 93 02 01 	sts	0x0102, r18
		D2^=1;
 110:	8a 81       	ldd	r24, Y+2	; 0x02
 112:	84 27       	eor	r24, r20
 114:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	if (D1)
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	88 23       	and	r24, r24
 11a:	19 f0       	breq	.+6      	; 0x122 <main+0x92>
	{
		PORTB |= (1 << PB0);
 11c:	28 9a       	sbi	0x05, 0	; 5
		PORTD &=~ (1 << PD7);
 11e:	5f 98       	cbi	0x0b, 7	; 11
 120:	02 c0       	rjmp	.+4      	; 0x126 <main+0x96>
	}
	else
	{
		PORTB &= ~(1 << PB0);
 122:	28 98       	cbi	0x05, 0	; 5
		PORTD |= (1 << PD7);
 124:	5f 9a       	sbi	0x0b, 7	; 11
	}

		if (D2)
 126:	8a 81       	ldd	r24, Y+2	; 0x02
 128:	88 23       	and	r24, r24
 12a:	19 f0       	breq	.+6      	; 0x132 <main+0xa2>
	{
		PORTD |= (1 << PD5);
 12c:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD &=~ (1 << PD6);
 12e:	5e 98       	cbi	0x0b, 6	; 11
 130:	d6 cf       	rjmp	.-84     	; 0xde <main+0x4e>
	}
	else
	{
		PORTD &= ~(1 << PD5);
 132:	5d 98       	cbi	0x0b, 5	; 11
		PORTD |= (1 << PD6);
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	d3 cf       	rjmp	.-90     	; 0xde <main+0x4e>

00000138 <__vector_13>:
//	sei();
   }
}

ISR(TIMER1_OVF_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
	PORTB^= (1 << PB2);
 146:	85 b1       	in	r24, 0x05	; 5
 148:	94 e0       	ldi	r25, 0x04	; 4
 14a:	89 27       	eor	r24, r25
 14c:	85 b9       	out	0x05, r24	; 5


 		 x--;
 14e:	80 91 00 01 	lds	r24, 0x0100
 152:	90 91 01 01 	lds	r25, 0x0101
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	90 93 01 01 	sts	0x0101, r25
 15c:	80 93 00 01 	sts	0x0100, r24
 		 y--;
 160:	80 91 02 01 	lds	r24, 0x0102
 164:	90 91 03 01 	lds	r25, 0x0103
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	90 93 03 01 	sts	0x0103, r25
 16e:	80 93 02 01 	sts	0x0102, r24



 //  cli();
}
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
