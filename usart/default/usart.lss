
usart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000004f  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000158  00000000  00000000  000001d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e0  00000000  00000000  00000331  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000015a  00000000  00000000  00000411  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b9  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000036  00000000  00000000  00000675  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

int main( void )
{

	int check=80;
	DDRC |= (1<<PC4)|(1<<PC5);
  80:	87 b1       	in	r24, 0x07	; 7
  82:	80 63       	ori	r24, 0x30	; 48
  84:	87 b9       	out	0x07, r24	; 7


void USART_Init(unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  86:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
  8a:	81 e1       	ldi	r24, 0x11	; 17
  8c:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  90:	88 e1       	ldi	r24, 0x18	; 24
  92:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 1stop bit, non parity */
	UCSR0C =(3<<UCSZ00);
  96:	86 e0       	ldi	r24, 0x06	; 6
  98:	80 93 c2 00 	sts	0x00C2, r24
		if (check==0x36)
			PORTC^=(1<<PC5);
		else PORTC&=~(1<<PC5);
		if (check==0x11)
		{
			PORTC^=(1<<PC4);
  9c:	50 e1       	ldi	r21, 0x10	; 16
	
		check=USART_Receive();	
		USART_Transmit(check);
		
		if (check==0x36)
			PORTC^=(1<<PC5);
  9e:	40 e2       	ldi	r20, 0x20	; 32
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
  a0:	80 91 c0 00 	lds	r24, 0x00C0
  a4:	87 ff       	sbrs	r24, 7
  a6:	fc cf       	rjmp	.-8      	; 0xa0 <main+0x20>

	/* Get and return received data from buffer */
	return UDR0;
  a8:	90 91 c6 00 	lds	r25, 0x00C6
	USART_Init(MYUBRR);
	
	while(1)
	{
	
		check=USART_Receive();	
  ac:	29 2f       	mov	r18, r25
  ae:	30 e0       	ldi	r19, 0x00	; 0


void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
  b0:	80 91 c0 00 	lds	r24, 0x00C0
  b4:	85 ff       	sbrs	r24, 5
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <main+0x30>
		;
	/* Put data into buffer, sends the data */
	UDR0= data;
  b8:	90 93 c6 00 	sts	0x00C6, r25
	{
	
		check=USART_Receive();	
		USART_Transmit(check);
		
		if (check==0x36)
  bc:	26 33       	cpi	r18, 0x36	; 54
  be:	31 05       	cpc	r19, r1
  c0:	21 f4       	brne	.+8      	; 0xca <main+0x4a>
			PORTC^=(1<<PC5);
  c2:	88 b1       	in	r24, 0x08	; 8
  c4:	84 27       	eor	r24, r20
  c6:	88 b9       	out	0x08, r24	; 8
  c8:	08 c0       	rjmp	.+16     	; 0xda <main+0x5a>
		else PORTC&=~(1<<PC5);
  ca:	45 98       	cbi	0x08, 5	; 8
		if (check==0x11)
  cc:	21 31       	cpi	r18, 0x11	; 17
  ce:	31 05       	cpc	r19, r1
  d0:	21 f4       	brne	.+8      	; 0xda <main+0x5a>
		{
			PORTC^=(1<<PC4);
  d2:	88 b1       	in	r24, 0x08	; 8
  d4:	85 27       	eor	r24, r21
  d6:	88 b9       	out	0x08, r24	; 8
  d8:	e3 cf       	rjmp	.-58     	; 0xa0 <main+0x20>
		}
		else PORTC&=~(1<<PC4);
  da:	44 98       	cbi	0x08, 4	; 8
  dc:	e1 cf       	rjmp	.-62     	; 0xa0 <main+0x20>

000000de <USART_Init>:


void USART_Init(unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  de:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
  e2:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  e6:	88 e1       	ldi	r24, 0x18	; 24
  e8:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 1stop bit, non parity */
	UCSR0C =(3<<UCSZ00);
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	80 93 c2 00 	sts	0x00C2, r24
}
  f2:	08 95       	ret

000000f4 <USART_Transmit>:


void USART_Transmit(unsigned char data)
{
  f4:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
  f6:	80 91 c0 00 	lds	r24, 0x00C0
  fa:	85 ff       	sbrs	r24, 5
  fc:	fc cf       	rjmp	.-8      	; 0xf6 <USART_Transmit+0x2>
		;
	/* Put data into buffer, sends the data */
	UDR0= data;
  fe:	90 93 c6 00 	sts	0x00C6, r25
}
 102:	08 95       	ret

00000104 <USART_Receive>:

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
 104:	80 91 c0 00 	lds	r24, 0x00C0
 108:	87 ff       	sbrs	r24, 7
 10a:	fc cf       	rjmp	.-8      	; 0x104 <USART_Receive>

	/* Get and return received data from buffer */
	return UDR0;
 10c:	80 91 c6 00 	lds	r24, 0x00C6
}
 110:	08 95       	ret

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
